// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: uploader_service_uploader.proto

package uploader_service_uploader

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Uploader_ImageUploadGrpc_FullMethodName = "/uploader_service_uploader.Uploader/ImageUploadGrpc"
)

// UploaderClient is the client API for Uploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploaderClient interface {
	ImageUploadGrpc(ctx context.Context, in *ImageUploadGrpcRequest, opts ...grpc.CallOption) (*ImageUploadGrpcResponse, error)
}

type uploaderClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderClient(cc grpc.ClientConnInterface) UploaderClient {
	return &uploaderClient{cc}
}

func (c *uploaderClient) ImageUploadGrpc(ctx context.Context, in *ImageUploadGrpcRequest, opts ...grpc.CallOption) (*ImageUploadGrpcResponse, error) {
	out := new(ImageUploadGrpcResponse)
	err := c.cc.Invoke(ctx, Uploader_ImageUploadGrpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploaderServer is the server API for Uploader service.
// All implementations must embed UnimplementedUploaderServer
// for forward compatibility
type UploaderServer interface {
	ImageUploadGrpc(context.Context, *ImageUploadGrpcRequest) (*ImageUploadGrpcResponse, error)
	mustEmbedUnimplementedUploaderServer()
}

// UnimplementedUploaderServer must be embedded to have forward compatible implementations.
type UnimplementedUploaderServer struct {
}

func (UnimplementedUploaderServer) ImageUploadGrpc(context.Context, *ImageUploadGrpcRequest) (*ImageUploadGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageUploadGrpc not implemented")
}
func (UnimplementedUploaderServer) mustEmbedUnimplementedUploaderServer() {}

// UnsafeUploaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploaderServer will
// result in compilation errors.
type UnsafeUploaderServer interface {
	mustEmbedUnimplementedUploaderServer()
}

func RegisterUploaderServer(s grpc.ServiceRegistrar, srv UploaderServer) {
	s.RegisterService(&Uploader_ServiceDesc, srv)
}

func _Uploader_ImageUploadGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageUploadGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderServer).ImageUploadGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uploader_ImageUploadGrpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderServer).ImageUploadGrpc(ctx, req.(*ImageUploadGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Uploader_ServiceDesc is the grpc.ServiceDesc for Uploader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uploader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uploader_service_uploader.Uploader",
	HandlerType: (*UploaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImageUploadGrpc",
			Handler:    _Uploader_ImageUploadGrpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uploader_service_uploader.proto",
}
